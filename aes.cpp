#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include <algorithm>
using namespace std;

static const unsigned char SBox[256] = {
	0xD4, 0xAD, 0x82, 0x7D, 0xA2, 0x59, 0xF0, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xCA, 0xC9, 0xFA, 0x47,
	0xA5, 0x34, 0xFD, 0x26, 0xE5, 0x3F, 0xCC, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0xB7, 0x93, 0x36, 0xF7,
	0xD3, 0xC2, 0x32, 0x0A, 0xAC, 0x06, 0x5C, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE0, 0x3A, 0x49, 0x24,
	0x12, 0x07, 0xC7, 0xC3, 0x80, 0x96, 0x9A, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x04, 0x23, 0x18, 0x05,
	0x01, 0x30, 0x7C, 0x7B, 0x67, 0x6B, 0xC5, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0x63, 0x77, 0xF2, 0x6F,
	0x1E, 0x9B, 0xF8, 0x11, 0x87, 0xD9, 0x94, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0xE1, 0x98, 0x69, 0x8E,
	0xCB, 0x6A, 0xD1, 0xED, 0xBE, 0xFC, 0x5B, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0x53, 0x00, 0x20, 0xB1,
	0xB6, 0xBC, 0xA3, 0x8F, 0xDA, 0x9D, 0xF5, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0x51, 0x40, 0x92, 0x38,
	0xA7, 0xC4, 0x0C, 0xEC, 0x7E, 0x97, 0x17, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0xCD, 0x13, 0x5F, 0x44,
	0x56, 0x6C, 0xC8, 0x6D, 0xF4, 0xD5, 0xA9, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xE7, 0x37, 0x8D, 0x4E,
	0x99, 0x41, 0xA1, 0x0D, 0x2D, 0xE6, 0x68, 0x0F, 0xB0, 0x54, 0xBB, 0x16, 0x8C, 0x89, 0xBF, 0x42,
	0xEE, 0x46, 0x81, 0xDC, 0xB8, 0x2A, 0x88, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0x60, 0x4F, 0x22, 0x90,
	0xDD, 0xE8, 0x78, 0x2E, 0x74, 0xA6, 0xC6, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0xBA, 0x25, 0x1C, 0xB4,
	0x35, 0x61, 0x3E, 0x66, 0x57, 0x03, 0x0E, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0x70, 0xB5, 0x48, 0xF6,
	0xF9, 0x45, 0xEF, 0xFB, 0x02, 0x4D, 0x85, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0xD0, 0xAA, 0x43, 0x33,
	0x3B, 0x52, 0x83, 0x1A, 0xD6, 0x6E, 0xA0, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x09, 0x2C, 0x1B, 0x5A
};

const string plainTextFile= "pt.bin";
const string keyFile = "key.bin";
const int BUFSIZE = 512;
const int BLKSIZE = 16;
const int MOD = 27;			//= 11011(2) (x^4 + x^3 + x + 1)

//a * b in GF(2^8)
int multInGf(int a, int b) {
	int result = 0;
	bool flag = false;				//최상위 비트(index 7)이 1로 set되어 있는지의 여부
	for (int i = 0; i < 8; ++i) {
		if (b & 1) {
			//곱하는 수의 최하위 비트가 set되어 있다면 연산을 진행함
			//flag가 true인 경우 MOD값을 추가로 XOR해주어야 한다.
			if (result == 0){		//한번도 수행되지 않았다면 result에 대입
				if (flag)
					result = (a ^ MOD);
				else
					result = a;
			}
			else {					//두번째 연산부터는 result와 XOR를 진행
				if (flag)
					result ^= (a ^ MOD);
				else
					result ^= a;
			}
		}
		b >>= 1;
		if (a & (1 << 7)) {
			//최상위 비트(index 7)이 set되어 있다면 flag를 true로 바꾸어 준다.
			a &= (~(1 << 7));
			flag = true;
		}
		a <<= 1;
	}
	return result;
}

void addRoundKey(unsigned char key[], unsigned char state[]) {
	for (int i = 0; i < BLKSIZE; ++i) {
		state[i] ^= key[i];
	}
}

void subByte(unsigned char state[]) {
	for (int i = 0; i < BLKSIZE; ++i) {
		state[i] = SBox[(state[i] & 0xF0) + (state[i] & 0x0F)];
	}
}

void shiftRow(unsigned char state[]) {
	int hold;
	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < i; ++k) {
			//한번 오른쪽 시프트
			hold = state[i + 4 * 3];
			for (int j = 1; j < 4; ++j) {
				state[i + 4 * j] = state[i + 4 * (j - 1)];
			}
			state[i] = hold;
		}
	}
}

void printHex(const unsigned char target[]) {
	for (int i = 0; i < BLKSIZE; ++i)
		cout << hex << setw(2) << setfill('0') << int(target[i]);
	cout << endl;
}

//for debug
string printBinary(int x) {
	string result = "";
	for (int i = 0; i < 8; ++i) {
		if (x % 2)
			result.push_back('1');
		else
			result.push_back('0');
		x /= 2;
	}
	reverse(result.begin(), result.end());
	return result;
}

int main() {
	ifstream textIn(plainTextFile, ios::in | ios::binary);
	ifstream keyIn(keyFile, ios::out | ios::binary);
	
	
	if (!textIn.is_open() || !keyIn.is_open()) {
		cerr << "error occur while opening file\n";
		exit(1);
	}

	unsigned char key[BLKSIZE];
	unsigned char state[BLKSIZE];
	cout << "key : ";
	for (int i = 0; keyIn.read((char*)&key[i], 1); ++i)
		cout << hex << setw(2) << setfill('0') << int(key[i]);
	cout << endl;
	cout << "Input plain text : ";
	for (int i = 0; textIn.read((char*)&state[i], 1); ++i)
		cout << hex << setw(2) << setfill('0') << int(state[i]);
	cout << endl;


	cout << "ROUND 0\n";
	addRoundKey(key, state);
	cout << "\tAR : ";
	printHex(state);

	for (int i = 0; i < 1; ++i) {
		cout << "ROUND " << i + 1 << endl;

		subByte(state);
		cout << "\tSB : ";
		printHex(state);

		shiftRow(state);
		cout << "\tSR : ";
		printHex(state);
	}
	return 0;
}
