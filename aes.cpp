#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>
#include <algorithm>
using namespace std;

/* //debugging
static const uint8_t r_sbox[256] = {
	//0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
	*/
static const unsigned char SBox[256] = {
	0xD4, 0xAD, 0x82, 0x7D, 0xA2, 0x59, 0xF0, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xCA, 0xC9, 0xFA, 0x47,
	0xA5, 0x34, 0xFD, 0x26, 0xE5, 0x3F, 0xCC, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0xB7, 0x93, 0x36, 0xF7,
	0xD3, 0xC2, 0x32, 0x0A, 0xAC, 0x06, 0x5C, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE0, 0x3A, 0x49, 0x24,
	0x12, 0x07, 0xC7, 0xC3, 0x80, 0x96, 0x9A, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x04, 0x23, 0x18, 0x05,
	0x01, 0x30, 0x7C, 0x7B, 0x67, 0x6B, 0xC5, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0x63, 0x77, 0xF2, 0x6F,
	0x1E, 0x9B, 0xF8, 0x11, 0x87, 0xD9, 0x94, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0xE1, 0x98, 0x69, 0x8E,
	0xCB, 0x6A, 0xD1, 0xED, 0xBE, 0xFC, 0x5B, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0x53, 0x00, 0x20, 0xB1,
	0xB6, 0xBC, 0xA3, 0x8F, 0xDA, 0x9D, 0xF5, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0x51, 0x40, 0x92, 0x38,
	0xA7, 0xC4, 0x0C, 0xEC, 0x7E, 0x97, 0x17, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0xCD, 0x13, 0x5F, 0x44,
	0x56, 0x6C, 0xC8, 0x6D, 0xF4, 0xD5, 0xA9, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xE7, 0x37, 0x8D, 0x4E,
	0x99, 0x41, 0xA1, 0x0D, 0x2D, 0xE6, 0x68, 0x0F, 0xB0, 0x54, 0xBB, 0x16, 0x8C, 0x89, 0xBF, 0x42,
	0xEE, 0x46, 0x81, 0xDC, 0xB8, 0x2A, 0x88, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0x60, 0x4F, 0x22, 0x90,
	0xDD, 0xE8, 0x78, 0x2E, 0x74, 0xA6, 0xC6, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0xBA, 0x25, 0x1C, 0xB4,
	0x35, 0x61, 0x3E, 0x66, 0x57, 0x03, 0x0E, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0x70, 0xB5, 0x48, 0xF6,
	0xF9, 0x45, 0xEF, 0xFB, 0x02, 0x4D, 0x85, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0xD0, 0xAA, 0x43, 0x33,
	0x3B, 0x52, 0x83, 0x1A, 0xD6, 0x6E, 0xA0, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x09, 0x2C, 0x1B, 0x5A
};

const string plainTextFile= "pt.bin";
const string keyFile = "key.bin";
const int BUFSIZE = 512;
const int BLKSIZE = 16;
const int EXPANDEDKEY = 44;
const int WORDSIZE = 4;
const int MOD = 27;			//= 11011(2) (x^4 + x^3 + x + 1)
const int NUMOFROUNDS = 11;

class WORD {
public:
	unsigned char bytes[WORDSIZE];			//1word = 4 bytes   (abcd)
	//4비트 입력을 하나의 word로 바꾸어 준다.
	WORD(unsigned char a = 0, unsigned char b = 0, unsigned char c = 0, unsigned char d = 0) {
		bytes[0] = a;
		bytes[1] = b;
		bytes[2] = c;
		bytes[3] = d;
	}

	WORD operator+(const WORD& ref) {
		WORD ret;
		for (int i = 0; i < WORDSIZE; ++i) {
			ret.bytes[i] = (this->bytes[i] ^ ref.bytes[i]);
		}
		return ret;
	}
};

//a * b in GF(2^8)
unsigned char multInGf(unsigned char a, unsigned char b) {
	unsigned char result = 0;
	bool flag = false;				//최상위 비트(index 7)이 1로 set되어 있는지의 여부
	for (int i = 0; i < 8; ++i) {
		if (b & 1) {
			//곱하는 수의 최하위 비트가 set되어 있다면 연산을 진행함
			//flag가 true인 경우 MOD값을 추가로 XOR해주어야 한다.
			if (result == 0){		//한번도 수행되지 않았다면 result에 대입
				if (flag)
					result = (a ^ MOD);
				else
					result = a;
			}
			else {					//두번째 연산부터는 result와 XOR를 진행
				if (flag)
					result ^= (a ^ MOD);
				else
					result ^= a;
			}
		}
		b >>= 1;
		if (a & (1 << 7)) {
			//최상위 비트(index 7)이 set되어 있다면 flag를 true로 바꾸어 준다.
			a &= (~(1 << 7));
			flag = true;
		}
		a <<= 1;
	}
	return result;
}


void addRoundKey(const WORD* roundKey, unsigned char state[]) {
	for (int i = 0; i < WORDSIZE; ++i) {
		state[4 * i] ^= (roundKey + i)->bytes[0];
		state[4 * i + 1] ^= (roundKey + i)->bytes[1];
		state[4 * i + 2] ^= (roundKey + i)->bytes[2];
		state[4 * i + 3] ^= (roundKey + i)->bytes[3];
	}
}

void subByte(unsigned char state[]) {
	for (int i = 0; i < BLKSIZE; ++i) {
		state[i] = SBox[(state[i] & 0xF0) + (state[i] & 0x0F)];
	}
}

void shiftRow(unsigned char state[]) {
	int hold;
	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < i; ++k) {
			//한번 오른쪽 시프트
			hold = state[i + 4 * 3];
			for (int j = 3; j >= 1; --j) {
				state[i + 4 * j] = state[i + 4 * (j - 1)];
			}
			state[i] = hold;
		}
	}
}

void mixColumn(unsigned char state[]) {
	unsigned char result[BLKSIZE];
	for (int i = 0; i < 4; ++i) {
		result[4 * i] = multInGf(0x02, state[4 * i]) ^ multInGf(0x03, state[4 * i + 1]) ^ state[4 * i + 2] ^ state[4 * i + 3];
		result[4 * i + 1] = state[4 * i] ^ multInGf(0x02, state[4 * i + 1]) ^ multInGf(0x03, state[4 * i + 2]) ^ state[4 * i + 3];
		result[4 * i + 2] = state[4 * i] ^ state[4 * i + 1] ^ multInGf(0x02, state[4 * i + 2]) ^ multInGf(0x03, state[4 * i + 3]);
		result[4 * i + 3] = multInGf(0x03, state[4 * i]) ^ state[4 * i + 1] ^ state[4 * i + 2] ^ multInGf(0x02, state[4 * i + 3]);
	}
	for (int i = 0; i < BLKSIZE; ++i) {
		state[i] = result[i];
	}
}

void printHex(const unsigned char target[]) {
	for (int i = 0; i < BLKSIZE; ++i)
		cout << hex << setw(2) << setfill('0') << int(target[i]);
	cout << endl;
}

//for debug
string printBinary(int x) {
	string result = "";
	for (int i = 0; i < 8; ++i) {
		if (x % 2)
			result.push_back('1');
		else
			result.push_back('0');
		x /= 2;
	}
	reverse(result.begin(), result.end());
	return result;
}


//return RC[round]
unsigned char getRoundCont(int round) {
	if (round == 1) return 1;
	else return multInGf(2, getRoundCont(round - 1));			//2 * RC[i-1]
}

// *2 over GF(2^8)
WORD addRoundCont(WORD wd, int round) {
	WORD ret;
	unsigned char roundCont = getRoundCont(round);
	for (int i = 0; i < WORDSIZE; ++i) {
		if (i)
			ret.bytes[i] = wd.bytes[i];
		else
			ret.bytes[i] = (wd.bytes[i] ^ roundCont);
	}
	return ret;
}

//1 byte left shift
WORD rotWord(WORD wd) {
	WORD ret;
	unsigned char hold = wd.bytes[0];
	for (int i = 0; i < WORDSIZE; ++i) {
		if (i == WORDSIZE - 1)
			ret.bytes[i] = hold;
		else
			ret.bytes[i] = wd.bytes[i + 1];
	}
	return ret;
}

WORD subWord(WORD wd) {
	WORD ret;
	for (int i = 0; i < WORDSIZE; ++i) {
		ret.bytes[i] = SBox[(wd.bytes[i] & 0xF0) + (wd.bytes[i] & 0x0F)];
		//ret.bytes[i] = r_sbox[(wd.bytes[i] & 0xf0) + (wd.bytes[i] & 0x0f)];			//for debug
	}
	return ret;
}

void keyExpansion(const unsigned char key[BLKSIZE], WORD wd[WORDSIZE * NUMOFROUNDS]) {
	WORD temp;
	for (int i = 0; i < WORDSIZE; ++i) {
		wd[i] = WORD(key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]);
	}
	for (int i = WORDSIZE; i < WORDSIZE * NUMOFROUNDS; ++i) {
		temp = wd[i - 1];
		if ((i % 4) == 0) {
			temp = addRoundCont(subWord(rotWord(temp)), i / 4);
		}
		wd[i] = wd[i - 4] + temp;
	}
}

int main() {
	ifstream textIn(plainTextFile, ios::in | ios::binary);
	ifstream keyIn(keyFile, ios::out | ios::binary);
	
	
	if (!textIn.is_open() || !keyIn.is_open()) {
		cerr << "error occur while opening file\n";
		exit(1);
	}

	unsigned char key[BLKSIZE];
	unsigned char state[BLKSIZE];
	WORD roundKey[WORDSIZE * NUMOFROUNDS];

	//read key
	for (int i = 0; keyIn.read((char*)&key[i], 1); ++i);
	cout << "key : ";
	printHex(key);

	//read plain text
	for (int i = 0; textIn.read((char*)&state[i], 1); ++i);
	cout << "Input plain text : ";
	printHex(state);
	cout << endl;

	keyExpansion(key, roundKey);

	for (int i = 0; i < NUMOFROUNDS; ++i) {
		cout << "ROUND " << dec << i << endl;

		if (i != 0) {
			//SubBytes
			subByte(state);
			cout << "\tSB : ";
			printHex(state);

			//ShiftRow
			shiftRow(state);
			cout << "\tSR : ";
			printHex(state);

			if (i != NUMOFROUNDS - 1) {
				//MixColumn
				mixColumn(state);
				cout << "\tMC : ";
				printHex(state);
			}
		}

		//AddRoundKey
		addRoundKey(roundKey + 4 * i, state);
		cout << "\tAR : ";
		printHex(state);

	}

	cout << endl << endl;
	cout << "Result Encryption: ";
	printHex(state);

	//encryption end

	//decryption begin


	return 0;
}
